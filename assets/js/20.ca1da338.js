(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{346:function(t,s,a){"use strict";a.r(s);var n=a(33),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"执行上下文相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文相关"}},[t._v("#")]),t._v(" 执行上下文相关")]),t._v(" "),a("p",[t._v("包含了变量对象、活动对象、作用域链、闭包、this指针等相关知识。")]),t._v(" "),a("h2",{attrs:{id:"基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),a("p",[t._v("执行上下文是当前代码被解析和执行时所在环境的一个抽象的概念。每一种代码的执行都需要依赖自身的上下文，在js中，只有3中类型，global、eval、function。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("一个function可能产生无限的上下文环境，因为一个函数的调用（甚至递归）都产生一个新的上下文环境。")])]),t._v(" "),a("p",[t._v("每一个执行的上下文，可以抽象的理解成一个obj，每个执行上下文都有一些属性，一般称之为上下文状态，包含变量对象、this指向、作用域链。")]),t._v(" "),a("h2",{attrs:{id:"执行上下文类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文类型"}},[t._v("#")]),t._v(" 执行上下文类型")]),t._v(" "),a("p",[t._v("上面说到js中执行上下文有3种")]),t._v(" "),a("ul",[a("li",[t._v("global，只有一个，在浏览器中，global就是window对象，当然golbal的上下文可能涵盖了很多的function和eval的实例。")]),t._v(" "),a("li",[t._v("function，函数函数的每一次调用，都会创建一个新的执行上下文，当函数执行完毕时删除。")]),t._v(" "),a("li",[t._v("eval，即在eval中执行的代码，每一次执行也会进入eval执行中的上下文，不建议使用，这边也不过多讲解。")])]),t._v(" "),a("h2",{attrs:{id:"执行栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行栈"}},[t._v("#")]),t._v(" 执行栈")]),t._v(" "),a("p",[t._v("一个执行上下文可以激活另一个上下文，就好比一个函数调用了另一个函数，然后一层一层调用下去。逻辑上来说，这种实现方式是栈，我们可以称之为上下文堆栈。\n执行栈具有 LIFO（后进先出）结构，存储着代码执行期间创建的所有执行上下文。")]),t._v(" "),a("p",[t._v("激活其它上下文的某个上下文被称为 调用者(caller) 。被激活的上下文被称为被调用者(callee) 。被调用者同时也可能是调用者(比如一个在全局上下文中被调用的函数调用某些自身的内部方法)。")]),t._v(" "),a("p",[t._v("当一个caller激活了一个callee，那么这个caller就会暂停它自身的执行，然后将控制权交给这个callee. 于是这个callee被放入堆栈，称为进行中的上下文[running/active execution context]. 当这个callee的上下文结束之后，会把控制权再次交给它的caller，然后caller会在刚才暂停的地方继续执行。在这个caller结束之后，会继续触发其他的上下文。一个callee可以用return或者抛出异常来结束自身的上下文。")]),t._v(" "),a("p",[t._v("首次运行js代码时，会创建一个global上下文并Push到当前的执行栈中。每当发生函数调用，引擎都会创建一个该函数的执行上下文并Push到执行栈中。在函数执行完毕以后再Pop出。")]),t._v(" "),a("h2",{attrs:{id:"执行上下文的2个阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文的2个阶段"}},[t._v("#")]),t._v(" 执行上下文的2个阶段")]),t._v(" "),a("p",[t._v("执行上下文的代码被分成两个基本的阶段来进行处理：")]),t._v(" "),a("ul",[a("li",[t._v("进入执行上下文")]),t._v(" "),a("li",[t._v("执行代码")])]),t._v(" "),a("p",[t._v("在进入执行上下文时，VO（变量对象）已经包含以下属性了")]),t._v(" "),a("ul",[a("li",[t._v("函数的所有形参(如果我们是在函数执行上下文中)")])]),t._v(" "),a("p",[t._v("— 由名称和对应值组成的一个变量对象的属性被创建；没有传递对应参数的话，那么由名称和undefined值组成的一种变量对象的属性也将被创建。")]),t._v(" "),a("ul",[a("li",[t._v("所有函数声明(FunctionDeclaration, FD)")])]),t._v(" "),a("p",[t._v("—由名称和对应值（函数对象(function-object)）组成一个变量对象的属性被创建；如果变量对象已经存在相同名称的属性，则完全替换这个属性。")]),t._v(" "),a("ul",[a("li",[t._v("所有变量声明(var, VariableDeclaration)")])]),t._v(" "),a("p",[t._v("— 由名称和对应值（undefined）组成一个变量对象的属性被创建；如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性。")]),t._v(" "),a("p",[t._v("这也就是变量提升和声明提升的原理。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("  注意这边的变量提升，变量的定义是：只能使用var关键字声明（当然es6有新增就是）。\n  也就是说，如果不使用var关键字，声明的是全局对象的属性，不具有变量提升的特性。\n  同时，变量不可以被delete，你可以试试var变量，然后delete全局对象的这个变量。\n")])])])]),t._v(" "),a("p",[t._v("代码执行")]),t._v(" "),a("p",[t._v("这个时候对应的AO/VO已经拥有了属性，不过大部分的属性没有值。这边要注意声明提升和变量提升的一个优先级。以下是一个很经典的例子")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// function")]),t._v("\n\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10")]),t._v("\n \n x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 20")]),t._v("\n")])])]),a("h2",{attrs:{id:"变量对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量对象"}},[t._v("#")]),t._v(" 变量对象")]),t._v(" "),a("p",[t._v("变量对象(VO) 是与执行上下文相关的 数据作用域。它是与上下文关联的特殊对象，用于存储被定义在上下文中的变量和函数声明。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("函数表达式是不包含在VO里面的。")])]),t._v(" "),a("p",[t._v("让我来看下实际代码:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// // 函数声明")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("baz")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数表达式")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n  window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bar "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" bar "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("baz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 引用错误，baz没有被定义")]),t._v("\n")])])]),a("p",[t._v("这时候的全局上下文的VO具有如下属性")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("key")]),t._v(" "),a("th",[t._v("value")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("foo")]),t._v(" "),a("td",[t._v("10")])]),t._v(" "),a("tr",[a("td",[t._v("bar")]),t._v(" "),a("td",[t._v("function")])])])]),t._v(" "),a("p",[t._v("如上所示，函数baz作为函数表达式并不被包含在VO中。所以外部访问不到。")]),t._v(" "),a("h2",{attrs:{id:"活动对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#活动对象"}},[t._v("#")]),t._v(" 活动对象")]),t._v(" "),a("p",[t._v("当函数被调用的时候，会创建一个特殊的活动对象。相比变量对象，它还包含了参数和一个特殊对象arguments。活动对象在函数上下文中作为变量对象使用。")]),t._v(" "),a("h2",{attrs:{id:"作用域链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域链"}},[t._v("#")]),t._v(" 作用域链")]),t._v(" "),a("p",[t._v("作用域链是一个对象列表，用以检索上下文代码中出现的标识符。\n标识符可以理解为变量名称，函数声明和普通参数。例如：当一个函数在自身函数体内需要引用一个变量，但是这个变量并没有在函数内部声明，那么这个变量就可以称为自由变量。那么我们搜寻这些自由变量就需要用到作用域链。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("  自由变量指在函数中使用的，但既不是参数，也不是局部变量的变量。\n  不存在当前活动对象的变量。\n  简单来说就是别的函数的变量。\n")])])])]),t._v(" "),a("p",[t._v("作用域链的创建时间是在执行上下文创建的时候，由当前的活动对象加上一个内部属性'[[scope]]'组成。这个属性包含了父级的层级链，也就是父级的所有变量对象（活动对象），这个内部属性的创建时期是函数声明的时候，也就是说作用域链和函数的声明位置有关。")]),t._v(" "),a("p",[t._v("在代码执行过程中，如果使用with或者catch语句就会改变作用域链。碰上这种情况，作用域链会从两个维度来搜寻。")]),t._v(" "),a("p",[t._v("还有一个特殊情况，使用Function构造函数创建的函数的[[scope]]属性总是唯一的全局对象。")]),t._v(" "),a("h3",{attrs:{id:"作用域链的二维查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域链的二维查找"}},[t._v("#")]),t._v(" 作用域链的二维查找")]),t._v(" "),a("p",[t._v("要注意js的原型特性，你所声明的变量和函数等等其实可以看做当前变量对象的属性，也就是说查询标识符的时候会往原型链上查找。")]),t._v(" "),a("p",[t._v("活动对象没有原型。")]),t._v(" "),a("h2",{attrs:{id:"闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[t._v("#")]),t._v(" 闭包")]),t._v(" "),a("p",[t._v("从理论角度来说，所有的函数都是闭包，前面说到，函数创建的时候就已经将父级的层级链保存下来了。\n不过从实践角度来说，要满足一下条件才是闭包")]),t._v(" "),a("ul",[a("li",[t._v("即使创建它的上下文已经销毁，它仍然存在（比如，内部函数从父函数中返回）")]),t._v(" "),a("li",[t._v("在代码中引用了自由变量")])]),t._v(" "),a("p",[t._v("闭包中的变量存储在堆内存中而不是栈内存。具体原理这边不多说，如果想了解可以查看"),a("a",{attrs:{href:"https://www.cnblogs.com/TomXu/archive/2012/01/31/2330252.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("此链接"),a("OutboundLink")],1)]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v(" 要注意，几个函数可能含有相同的父级作用域，也就是说在[[scope]]中存在的变量是会共享的。\n 其实这种情况很常见，比如全局变量什么的。\n")])])])]),t._v(" "),a("h2",{attrs:{id:"this指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this指针"}},[t._v("#")]),t._v(" This指针")]),t._v(" "),a("p",[t._v("注：这边从一个比较粗浅容易理解的方式讲解，如果想要深入底层可以查看"),a("a",{attrs:{href:"https://www.cnblogs.com/TomXu/archive/2012/01/17/2310479.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("此链接"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("简单来说this指针绑定分5种情况：")]),t._v(" "),a("ul",[a("li",[t._v("默认绑定")]),t._v(" "),a("li",[t._v("隐式绑定")]),t._v(" "),a("li",[t._v("显示绑定")]),t._v(" "),a("li",[t._v("new绑定")]),t._v(" "),a("li",[t._v("箭头函数绑定")])]),t._v(" "),a("h3",{attrs:{id:"默认绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#默认绑定"}},[t._v("#")]),t._v(" 默认绑定")]),t._v(" "),a("p",[t._v("独立函数调用，可以把默认绑定看作是无法应用其它规则时的默认规则，非严格模式下this绑定到window，在严格模式下，则为undefined")]),t._v(" "),a("h3",{attrs:{id:"隐式绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#隐式绑定"}},[t._v("#")]),t._v(" 隐式绑定")]),t._v(" "),a("p",[t._v("当函数引用有上下文对象时，会将this绑定到这个对象上。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     foo"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" foo\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n")])])]),a("p",[t._v("要注意有种隐式丢失的情况,比如参数传递、callback等等。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 虽然bar是obj.foo的一个引用，但是实际上，它引用的是foo函数本身。")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bar()是一个不带任何修饰的函数调用，应用默认绑定。")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     foo"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" foo\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" bar "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数别名")]),t._v("\n\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"oops, global"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a是全局对象的属性")]),t._v("\n\n "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "oops, global"')]),t._v("\n")])])]),a("h3",{attrs:{id:"显示绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#显示绑定"}},[t._v("#")]),t._v(" 显示绑定")]),t._v(" "),a("p",[t._v("通过call和apply方法或者bind方法进行调用。如果使用这些方法你传入的是bull或者undefined，那么应用的就是默认规则，也就是绑定到window上。")]),t._v(" "),a("h3",{attrs:{id:"new绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#new绑定"}},[t._v("#")]),t._v(" new绑定")]),t._v(" "),a("p",[t._v("使用new来调用函数会发生以下操作：")]),t._v(" "),a("ul",[a("li",[t._v("创建（或者说构造）一个新对象。")]),t._v(" "),a("li",[t._v("这个新对象会被执行[[Prototype]]连接。")]),t._v(" "),a("li",[t._v("这个新对象会绑定到函数调用的this。")]),t._v(" "),a("li",[t._v("如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这个新对象。")])]),t._v(" "),a("p",[t._v("我们可以模拟一个new")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("demo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建一个空的对象")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     Pro "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shift")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获得构造函数，arguments中去除第一个参数      ")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 链接到原型，obj 可以访问到构造函数原型中的属性")]),t._v("\n obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pro")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 绑定 this 实现继承，obj 可以访问到构造函数中的属性")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ret "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pro")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 优先返回构造函数返回的对象")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ret "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" ret "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"箭头函数绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#箭头函数绑定"}},[t._v("#")]),t._v(" 箭头函数绑定")]),t._v(" "),a("p",[t._v("箭头函数的this依赖外层作用域来指定this，this无法直接更改，可间接更改(修改父级作用域)。")])])}),[],!1,null,null,null);s.default=e.exports}}]);