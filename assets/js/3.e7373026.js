(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{327:function(v,_,t){v.exports=t.p+"assets/img/item1.f9f302db.png"},328:function(v,_,t){v.exports=t.p+"assets/img/item2.f2c98af4.png"},329:function(v,_,t){v.exports=t.p+"assets/img/item3.38b5065f.png"},330:function(v,_,t){v.exports=t.p+"assets/img/item4.a7143306.png"},331:function(v,_,t){v.exports=t.p+"assets/img/item6.12f7cf47.png"},332:function(v,_,t){v.exports=t.p+"assets/img/item5.06b6a1d5.png"},333:function(v,_,t){v.exports=t.p+"assets/img/item7.5ef78b54.png"},334:function(v,_,t){v.exports=t.p+"assets/img/item8.0e4de442.png"},335:function(v,_,t){v.exports=t.p+"assets/img/item10.678d6d44.png"},336:function(v,_,t){v.exports=t.p+"assets/img/item11.1895030c.png"},337:function(v,_,t){v.exports=t.p+"assets/img/item12.b181592d.png"},338:function(v,_,t){v.exports=t.p+"assets/img/item9.1ffc4e18.png"},356:function(v,_,t){"use strict";t.r(_);var s=t(33),a=Object(s.a)({},(function(){var v=this,_=v.$createElement,s=v._self._c||_;return s("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[s("h1",{attrs:{id:"js设计模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js设计模式"}},[v._v("#")]),v._v(" js设计模式")]),v._v(" "),s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[v._v("#")]),v._v(" 前言")]),v._v(" "),s("p",[v._v("我们写项目，说白了，其实就是编写各个模块，与模块之间的沟通，设计模式的存在，就是为了更好的设计模块，设计模块之间的沟通，让代码更加优雅，质量更高。")]),v._v(" "),s("p",[v._v("设计模式一定要记得他们的异，而不是形")]),v._v(" "),s("h2",{attrs:{id:"设计原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设计原则"}},[v._v("#")]),v._v(" 设计原则")]),v._v(" "),s("p",[v._v("接下来介绍一些设计模式的基本原则")]),v._v(" "),s("ol",[s("li",[v._v("依赖倒置")])]),v._v(" "),s("p",[v._v("核心思想就是，我们的上层模块，不要依赖于具体的低层模块。而应该依赖于抽象。举一个例子，我们去吃饭，往往依赖的一般是餐厅这个抽象的概念，而不是具体的食物。和依赖注入一样是控制反转的一种方式，但是具体区别就是，依赖注入关注如果获取依赖并注入，而依赖倒置关注如何将上层与低层进行解耦。")]),v._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[v._v("接口隔离原则")])]),v._v(" "),s("p",[v._v("用直白的话来说，接口应该细化，功能应该单一，和单一职责的区别就是，单一职责关注模块本身，接口隔离关注的是接口。其实可以理解为将具有单一职责的程序转化到一个具有公共接口的对象。")]),v._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[v._v("迪米特法则")])]),v._v(" "),s("p",[v._v("也叫最少知识原则，它的意义是，两个对象沟通的时候，最好让两个对象之间知道的越少越好，可以理解为低耦合，就像是设计模式的中介者模式。比如你招房产中介，其实你并不是特别了解房东不是么，这就是迪米特法则的一个很好的体现。")]),v._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[v._v("里氏替换原则")])]),v._v(" "),s("p",[v._v("主要关注继承，它的意义是，我们任何父类使用的地方，都可以使用子类去替换。直白点说，子类去继承父类的时候，要保证完全继承父类的属性和方法。")]),v._v(" "),s("ol",{attrs:{start:"5"}},[s("li",[v._v("单一职责")])]),v._v(" "),s("p",[v._v("我们的一个模块应该只做一件事情，这边对于职责的划分可以参考"),s("a",{attrs:{href:"https://www.cnblogs.com/TomXu/archive/2012/01/06/2305513.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("这个链接"),s("OutboundLink")],1),v._v("，通俗点说，模块的工作越单一越好，越内聚越好。")]),v._v(" "),s("ol",{attrs:{start:"6"}},[s("li",[v._v("开闭原则")])]),v._v(" "),s("p",[v._v("我们的程序要对扩展开放，对修改关闭，通俗点说，我们封装一个东西，要让别人可以对其进行扩展，而不是在进行扩展的时候需要去修改我们的源码。比如vue的插件等等，都可以看成一个开闭原则的体现。")]),v._v(" "),s("h2",{attrs:{id:"设计模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[v._v("#")]),v._v(" 设计模式")]),v._v(" "),s("p",[v._v("设计模式，是设计原则的一个具体的体现！")]),v._v(" "),s("h3",{attrs:{id:"设计模式的分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设计模式的分类"}},[v._v("#")]),v._v(" 设计模式的分类")]),v._v(" "),s("p",[v._v("设计模式主要分为以下几类：")]),v._v(" "),s("ul",[s("li",[v._v("创建型")])]),v._v(" "),s("p",[v._v("帮助我们更优雅的创建对象")]),v._v(" "),s("ul",[s("li",[v._v("结构型")])]),v._v(" "),s("p",[v._v("帮助我们优雅的设计结构")]),v._v(" "),s("ul",[s("li",[v._v("行为型")])]),v._v(" "),s("p",[v._v("模块之间行为的模式总结，帮助我们组织模块行为（沟通）")]),v._v(" "),s("ul",[s("li",[v._v("技巧型")])]),v._v(" "),s("p",[v._v("一些帮助我们优化代码的技巧")]),v._v(" "),s("p",[v._v("接下来我们具体说一下各个类型包含哪些设计模式：")]),v._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),s("p",[v._v("这边没有特别详细的进行设计模式的讲解，主要是大致了解各个类型有哪些设计模式以及他们的一个思想。")]),v._v(" "),s("p",[v._v("设计模式具体的使用和代码讲解还未全部更新。")]),v._v(" "),s("p",[v._v("设计模式是比较抽象的概念，还是要多写代码才会有更深的理解。")])]),v._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[v._v("WARNING")]),v._v(" "),s("p",[v._v("很多关于设计模式的文章，有的解释会不太一样，可能名字不同之类的，不过概念是一样的")])]),v._v(" "),s("p",[s("strong",[v._v("创建型")])]),v._v(" "),s("ul",[s("li",[v._v("工厂模式")])]),v._v(" "),s("p",[v._v("你告诉我你要什么样的对象，我就给你什么对象。")]),v._v(" "),s("ul",[s("li",[v._v("建造者模式")])]),v._v(" "),s("p",[v._v("精细化组合对象（模块）")]),v._v(" "),s("ul",[s("li",[v._v("单例模式")])]),v._v(" "),s("p",[v._v("全局只有我一个")]),v._v(" "),s("ul",[s("li",[v._v("原型模式")])]),v._v(" "),s("p",[v._v("js的灵魂，其实就是原型链")]),v._v(" "),s("p",[s("strong",[v._v("结构型")])]),v._v(" "),s("ul",[s("li",[v._v("外观模式")])]),v._v(" "),s("p",[v._v("比如你取餐厅的时候，会有许多的套餐，其实那就是外观模式，将多种食物进行打包，变成一个套餐给你。在代码中的体现就是，封装一个函数，里面调用了多个方法类等等。")]),v._v(" "),s("ul",[s("li",[v._v("享元模式")])]),v._v(" "),s("p",[v._v("共享元信息来减少代码，优化结构")]),v._v(" "),s("ul",[s("li",[v._v("适配器模式")])]),v._v(" "),s("p",[v._v("用适配代替更改")]),v._v(" "),s("ul",[s("li",[v._v("桥接模式")])]),v._v(" "),s("p",[v._v("独立出来，然后再对接过去，通过桥接代替耦合，减少模块之间的耦合")]),v._v(" "),s("ul",[s("li",[v._v("装饰者模式")])]),v._v(" "),s("p",[v._v("更优雅的扩展需求")]),v._v(" "),s("ul",[s("li",[v._v("模板方法")])]),v._v(" "),s("p",[v._v("比如简历模板之类的")]),v._v(" "),s("p",[s("strong",[v._v("行为型")])]),v._v(" "),s("ul",[s("li",[s("p",[v._v("观察者模式（也叫发布订阅模式）")])]),v._v(" "),s("li",[s("p",[v._v("职责链模式")])])]),v._v(" "),s("p",[v._v("像生产线一样组织模块")]),v._v(" "),s("ul",[s("li",[v._v("状态模式")])]),v._v(" "),s("p",[v._v("用状态代替判断")]),v._v(" "),s("ul",[s("li",[v._v("命令模式")])]),v._v(" "),s("p",[v._v("用命令去解耦")]),v._v(" "),s("ul",[s("li",[v._v("策略模式")])]),v._v(" "),s("p",[v._v("算法工厂，和工厂模式有点像，你告诉我要什么算法，我就给你什么算法")]),v._v(" "),s("ul",[s("li",[v._v("迭代器模式")])]),v._v(" "),s("p",[v._v("告别for循环")]),v._v(" "),s("p",[s("strong",[v._v("技巧型")])]),v._v(" "),s("ul",[s("li",[v._v("链模式")])]),v._v(" "),s("p",[v._v("链式调用")]),v._v(" "),s("ul",[s("li",[v._v("惰性模式")])]),v._v(" "),s("p",[v._v("我要搞机器学习")]),v._v(" "),s("ul",[s("li",[v._v("委托模式")])]),v._v(" "),s("p",[v._v("让别人代替你收快递")]),v._v(" "),s("ul",[s("li",[v._v("等待着模式")])]),v._v(" "),s("p",[v._v("等你们都回来再吃饭")]),v._v(" "),s("ul",[s("li",[v._v("数据访问模式")])]),v._v(" "),s("p",[v._v("一个方便的数据管理器")]),v._v(" "),s("p",[v._v("接下来是设计模式详细讲解：（一些像原型这边就不过多讲解了）")]),v._v(" "),s("h3",{attrs:{id:"工厂模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#工厂模式"}},[v._v("#")]),v._v(" 工厂模式")]),v._v(" "),s("p",[v._v("可以理解为用调用方法来代替new关键字，在创建大量对象的时候，不用知道具体new哪个，只需要告诉工厂你要哪个")]),v._v(" "),s("p",[v._v("应用场景：当某一个对象经常要创建的时候")]),v._v(" "),s("p",[s("img",{attrs:{src:t(327),alt:""}})]),v._v(" "),s("h3",{attrs:{id:"建造者模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#建造者模式"}},[v._v("#")]),v._v(" 建造者模式")]),v._v(" "),s("p",[v._v("和工程模式不同，工厂模式的应用场景主要是在大量创建对象的时候，而建造者模式则是在创建单个，庞大的组合对象的时候")]),v._v(" "),s("p",[s("img",{attrs:{src:t(328),alt:""}})]),v._v(" "),s("h3",{attrs:{id:"单例模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单例模式"}},[v._v("#")]),v._v(" 单例模式")]),v._v(" "),s("p",[v._v("为了避免重复创建，避免多个对象存在相互干扰。写jq的时候不都有判断是new新建还是直接return么，这个就是单例模式 ，做法不是很固定，主要是思想")]),v._v(" "),s("p",[s("img",{attrs:{src:t(329),alt:""}})]),v._v(" "),s("hr"),v._v(" "),s("p",[v._v("这边我将享元模式和模板方法、桥接模式放到一起讲，它们的主要目的都是提高代码的可复用性")]),v._v(" "),s("h3",{attrs:{id:"享元模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#享元模式"}},[v._v("#")]),v._v(" 享元模式")]),v._v(" "),s("p",[v._v("享元的核心思想是共享一个元信息，这个元信息可能是一个类，也可以是一个属性等等，将公有和私有进行分离，公有的进行共享\t\t(参考jq里面的extend，那个i的应用，那个i，其实就是享元里面的元信息。)")]),v._v(" "),s("p",[s("img",{attrs:{src:t(330),alt:""}})]),v._v(" "),s("h3",{attrs:{id:"模板方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模板方法"}},[v._v("#")]),v._v(" 模板方法")]),v._v(" "),s("p",[v._v("模板方法提取公共实现，具体实现延迟到使用的时候，它一般是一个方法，或者类。核心思想是定义一个基础行为，后续可以进行扩展等")]),v._v(" "),s("p",[s("img",{attrs:{src:t(331),alt:""}})]),v._v(" "),s("h3",{attrs:{id:"桥接模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#桥接模式"}},[v._v("#")]),v._v(" 桥接模式")]),v._v(" "),s("p",[v._v("桥接模式，核心思想是将 "),s("strong",[v._v("抽象和实现")]),v._v(" 分离，然后进行 "),s("strong",[v._v("关联")]),v._v(" ，享元只是共享了信息，但是并没有进行关联操作")]),v._v(" "),s("p",[s("img",{attrs:{src:t(332),alt:""}})]),v._v(" "),s("hr"),v._v(" "),s("p",[v._v("这边扩展一下js的组合和继承")]),v._v(" "),s("p",[s("img",{attrs:{src:t(333),alt:""}})]),v._v(" "),s("p",[v._v("js的组合与继承，组合并不能自动的获取父类的方法等，需要手动的进行组合，这是坏处，继承的问题就是，子类更改父类会影响所有子类。所以说尽量使用组合而不使用继承。")]),v._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[v._v("在设计模式中，有一种继承的替代方案，它能给不同对象各自添加新行为,\n不会像继承一样在子类中增加行为会影响原有类所有的实例。\n具体参考https://www.cnblogs.com/TomXu/archive/2012/02/24/2353434.html\n")])])]),s("hr"),v._v(" "),s("hr"),v._v(" "),s("p",[v._v("接下来介绍提高代码质量以及优化代码操作的一些模式")]),v._v(" "),s("p",[v._v("扩展一下什么是代码质量")]),v._v(" "),s("ul",[s("li",[s("p",[v._v("代码整洁   包括命名、缩进、没有多余的累赘代码等方面")])]),v._v(" "),s("li",[s("p",[v._v("结构规整，没有漫长的结构  漫长的结构是指，赋值语句、if、else等等")])]),v._v(" "),s("li",[s("p",[v._v("良好的阅读理解    就是语义化的相关")])])]),v._v(" "),s("p",[v._v("提高代码质量的设计模式主要包括以下几种：")]),v._v(" "),s("p",[s("img",{attrs:{src:t(334),alt:""}})]),v._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[v._v("WARNING")]),v._v(" "),s("p",[v._v("这边要注意，策略模式和状态模式还是有一定区别的，上图主要说的是这两个都可以优化if-else分支，具体的下面会讲解")])]),v._v(" "),s("h3",{attrs:{id:"策略模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#策略模式"}},[v._v("#")]),v._v(" 策略模式")]),v._v(" "),s("p",[s("img",{attrs:{src:t(335),alt:""}})]),v._v(" "),s("h3",{attrs:{id:"状态模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#状态模式"}},[v._v("#")]),v._v(" 状态模式")]),v._v(" "),s("p",[s("img",{attrs:{src:t(336),alt:""}})]),v._v(" "),s("p",[v._v("状态模式的本质是不同状态的切换可由子类实现的本质，和策略模式不太一样，策略模式主要是由用户选择哪个策略，可以看成一个算法工厂。想要更详细的了解可以百度，或者等我哪天想起来再。。咳咳")]),v._v(" "),s("h3",{attrs:{id:"外观模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#外观模式"}},[v._v("#")]),v._v(" 外观模式")]),v._v(" "),s("p",[s("img",{attrs:{src:t(337),alt:""}})]),v._v(" "),s("hr"),v._v(" "),s("hr"),v._v(" "),s("p",[v._v("接下来介绍优化代码操作的一些模式，这个模式比较简单，不具体介绍，看下图")]),v._v(" "),s("h3",{attrs:{id:"迭代器模式与备忘录模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#迭代器模式与备忘录模式"}},[v._v("#")]),v._v(" 迭代器模式与备忘录模式")]),v._v(" "),s("p",[v._v("备忘录模式其实就是一个缓存模式，迭代器，相信你也整天用，就不用细说了")]),v._v(" "),s("p",[s("img",{attrs:{src:t(338),alt:""}})])])}),[],!1,null,null,null);_.default=a.exports}}]);