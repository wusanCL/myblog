(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{325:function(e,t,v){e.exports=v.p+"assets/img/item2.48985757.jpg"},347:function(e,t,v){"use strict";v.r(t);var _=v(33),a=Object(_.a)({},(function(){var e=this,t=e.$createElement,_=e._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h1",{attrs:{id:"浏览器渲染原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#浏览器渲染原理"}},[e._v("#")]),e._v(" 浏览器渲染原理")]),e._v(" "),_("p",[e._v("这是一个比较重要的知识，因为知道了浏览器渲染的原理，可以极大的提升我们的页面性能。主要体现在以下方面：")]),e._v(" "),_("ul",[_("li",[e._v("了解浏览器如何进行加载，我们可以在引用外部样式文件，外部JS时，将它们放到合适的位置。")]),e._v(" "),_("li",[e._v("了解浏览器如何进行解析，我们可以在构建DOM结构，组织CSS选择器的时候，选择最优的写法，提高浏览器的解析速率。")]),e._v(" "),_("li",[e._v("了解浏览器如何进行渲染，明白渲染的过程，我们在设置元素属性，编写JS文件时，可以减少“重绘”，“回流”的消耗。")])]),e._v(" "),_("p",[e._v("接下来具体介绍以下什么是浏览器渲染")]),e._v(" "),_("h2",{attrs:{id:"基本概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[e._v("#")]),e._v(" 基本概念")]),e._v(" "),_("p",[e._v("DOM：浏览器将HTML解析成树形的数据结构，简称DOM。")]),e._v(" "),_("p",[e._v("CSSOM：浏览器将CSS解析成树形的数据结构，简称CSSOM。")]),e._v(" "),_("p",[e._v("Render Tree: DOM和CSSOM合并后生成。")]),e._v(" "),_("p",[e._v("Layout: 计算出Render Tree每个节点的具体位置。")]),e._v(" "),_("p",[e._v("Painting：将Layout后的节点内容渲染到屏幕上。")]),e._v(" "),_("p",[e._v("浏览器的加载与解析是自上而下的，在加载资源的时候，遇到外部css文件和图片会进行异步加载，但是，如果遇到js文件，由于js会更改dom，所以浏览器会停止渲染相关进程，去加载执行完js文件后，才会继续渲染，这也是为什么js文件一般放在底部boddy前的原因。")]),e._v(" "),_("h2",{attrs:{id:"完整流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#完整流程"}},[e._v("#")]),e._v(" 完整流程")]),e._v(" "),_("p",[e._v("当浏览器拿到HTML文档时首先会进行HTML文档解析，构建DOM树。")]),e._v(" "),_("p",[e._v("遇到css样式如link标签或者style标签时开始解析css，构建样式树（当然这边有个加载资源）。HTML解析构建和CSS的解析是相互独立的并不会造成冲突，因此我们通常将css样式放在head中，让浏览器尽早解析css。")]),e._v(" "),_("p",[e._v("当html的解析遇到script标签时停止DOM树的解析开始下载js。例如有的节点是用js动态构建的，在这种情况下就会停止dom树的构建开始下载解析js。将控制权移交给 JavaScript 引擎；等 JavaScript 引擎运行完毕，浏览器会从中断的地方恢复 DOM 构建。而因此就会推迟页面首绘的时间。"),_("strong",[e._v("可以在首绘不需要js的情况下用async和defer实现异步加载。这样js就不会阻塞html的解析了。")]),e._v(" 当HTML解析完成后，浏览器会将文档标注为交互状态，并开始解析那些处于“deferred”模式的脚本，也就是那些应在文档解析完成后才执行的脚本。然后，文档状态将设置为“完成”，一个“加载”事件将随之触发。注意，异步执行是指下载。执行js时仍然会阻塞。")]),e._v(" "),_("p",[e._v("在得到DOM树和样式树后就可以进行渲染树的构建了。应注意的是 "),_("strong",[e._v("渲染树和 DOM 元素并非是一一对应的")]),e._v("。比如非可视化的 DOM 元素不会插入呈现树中，例如“head”元素。如果元素的 display 属性值为“none”，那么也不会显示在呈现树中（但是 visibility 属性值为“hidden”的元素仍会显示）")]),e._v(" "),_("p",[e._v("渲染树构建完毕后将会进行布局。布局使用流模型的Layout算法。所谓流模型，即是指Layout的过程只需进行一遍即可完成，后出现在流中的元素不会影响前出现在流中的元素，Layout过程只需从左至右从上至下一遍完成即可。但实际实现中，流模型会有例外。Layout是一个递归的过程，每个节点都负责自己及其子节点的Layout。Layout结果是相对父节点的坐标和尺寸。其过程可以简述为：")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("父节点确定自己的宽度\n父节点完成子节点放置，确定其相对坐标\n节点确定自己的宽度和高度\n父节点根据所有的子节点高度计算自己的高度\n")])])]),_("p",[e._v("此时renderTree已经构建完毕，不过浏览器渲染树引擎并不直接使用渲染树进行绘制，为了方便处理定位（裁剪），溢出滚动（页内滚动），CSS转换/不透明/动画/滤镜，蒙版或反射，Z （Z排序）等，浏览器需要生成另外一棵树 - 层树。因此绘制过程如下：\n获取 DOM 并将其分割为多个层(RenderLayer)\n将每个层栅格化，并独立的绘制进位图中\n将这些位图作为纹理上传至 GPU\n复合多个层来生成最终的屏幕图像(终极layer)。")]),e._v(" "),_("h3",{attrs:{id:"html与css样式的解析"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#html与css样式的解析"}},[e._v("#")]),e._v(" HTML与CSS样式的解析")]),e._v(" "),_("p",[e._v('DOM 和 CSSOM 都是以" Bytes → characters → tokens → nodes → object model. " 这样的方式生成最终的数据')]),e._v(" "),_("p",[e._v("DOM解析过程参考下图\n"),_("img",{attrs:{src:v(325),alt:""}}),e._v("\n具体内容参考"),_("a",{attrs:{href:"https://blog.csdn.net/riddle1981/article/details/78681191",target:"_blank",rel:"noopener noreferrer"}},[e._v("这里"),_("OutboundLink")],1),e._v("\n这边暂时不详细讲解（其实就是感觉没啥用而且又复杂）")]),e._v(" "),_("h2",{attrs:{id:"重绘与回流"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#重绘与回流"}},[e._v("#")]),e._v(" 重绘与回流")]),e._v(" "),_("p",[e._v("Repaint（重绘）——屏幕的一部分要重画，比如某个CSS的背景色变了。但是元素的几何尺寸没有变。")]),e._v(" "),_("p",[e._v("Reflow（回流）——意味着元素的几何尺寸变了，我们需要重新验证并计算Render Tree。是Render Tree的一部分或全部发生了变化。这就是Reflow，或是Layout。reflow 会从这个root frame开始递归往下，依次计算所有的结点几何尺寸和位置，在reflow过程中，可能会增加一些frame，比如一个文本字符串必需被包装起来。回流可以说是无法避免的，因为只要用户进行交互操作，就势必会发生页面的一部分的重新渲染，且通常我们也无法预估浏览器到底会reflow哪一部分的代码，因为他们会相互影响。")]),e._v(" "),_("p",[e._v("简单理解，区别几何尺寸是否改变，是否需要重新计算render tree。")]),e._v(" "),_("p",[e._v("reflow回流必定引起repaint重绘，重绘可以单独触发。")]),e._v(" "),_("p",[e._v("现代浏览器会对回流做优化，它会等到足够数量的变化发生，再做一次批处理回流。但是在有些情况下，比如resize窗口，改变了页面默认的字体等。对于这些操作，浏览器会马上进行reflow。")]),e._v(" "),_("p",[e._v("下面这些动作有很大可能会是成本比较高的：")]),e._v(" "),_("p",[e._v("增加、删除、修改DOM结点时，会导致Reflow或Repaint")]),e._v(" "),_("p",[e._v("移动DOM的位置，或是搞个动画的时候")]),e._v(" "),_("p",[e._v("内容发生变化")]),e._v(" "),_("p",[e._v("修改CSS样式的时候")]),e._v(" "),_("p",[e._v("Resize窗口的时候（移动端没有这个问题），或是滚动的时候")]),e._v(" "),_("p",[e._v("修改网页的默认字体时")]),e._v(" "),_("p",[e._v("基本上来说，reflow有如下的几个原因：")]),e._v(" "),_("p",[e._v("Initial，网页初始化的时候")]),e._v(" "),_("p",[e._v("Incremental，一些js在操作DOM树时")]),e._v(" "),_("p",[e._v("Resize，其些元件的尺寸变了")]),e._v(" "),_("p",[e._v("StyleChange，如果CSS的属性发生变化了")]),e._v(" "),_("p",[e._v("Dirty，几个Incremental的reflow发生在同一个frame的子树上")]),e._v(" "),_("p",[e._v("关于重绘与回流的一些优化建议请看"),_("RouterLink",{attrs:{to:"/student/aboutBrowser/sumUp.html#重绘与回流相关建议"}},[e._v("这里")]),e._v("。")],1),e._v(" "),_("h2",{attrs:{id:"易错点与扩展知识点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#易错点与扩展知识点"}},[e._v("#")]),e._v(" 易错点与扩展知识点")]),e._v(" "),_("ol",[_("li",[_("p",[e._v("DOM树的构建是从接受到文档开始的 一边会进行将字节转化为字符 字符转化为标记 标记构建dom树,这个过程被分为标记化和树构建,而这是一个渐进的过程。为达到更好的用户体验，呈现引擎会力求尽快将内容显示在屏幕上。它不必等到整个 HTML 文档解析完毕之后，就会开始构建呈现树和设置布局。在不断接收和处理来自网络的其余内容的同时，呈现引擎会将部分内容解析并显示出来")])]),e._v(" "),_("li",[_("p",[e._v("渲染树和DOM树以及CSS样式树构建在实际进行的时候不是完全独立的，而是会有交叉。会造成一边加载，一边解析，一边渲染的工作现象。")])]),e._v(" "),_("li",[_("p",[e._v("css的解析是自右至左逆向解析的，嵌套越多越增加浏览器的工作量，而不会越快。")])]),e._v(" "),_("li",[_("p",[_("strong",[e._v("首屏时间与白屏时间")])])])]),e._v(" "),_("p",[e._v("首屏时间——当浏览器显示第一屏页面所消耗的时间，在国内的网络条件下，通常一个网站，如果“首屏时间”在2秒以内是比较优秀的，5秒以内用户可以接受，10秒以上就不可容忍了。")]),e._v(" "),_("p",[e._v("白屏时间——指浏览器开始显示内容的时间。但是在传统的采集方式里，是在HTML的头部标签结尾里记录时间戳，来计算白屏时间。在这个时刻，浏览器开始解析身体标签内的内容。而现代浏览器不会等待CSS树（所有CSS文件下载和解析完成）和DOM树（整个身体标签解析完成）构建完成才开始绘制，而是马上开始显示中间结果。所以经常在低网速的环境中，观察到页面由上至下缓慢显示完，或者先显示文本内容后再重绘成带有格式的页面内容。")]),e._v(" "),_("ol",{attrs:{start:"5"}},[_("li",[_("strong",[e._v("onload和DOMContentLoaded")])])]),e._v(" "),_("p",[e._v("onload事件——当 onload 事件触发时，页面上所有的DOM，样式表，脚本，图片，flash都已经加载完成了。")]),e._v(" "),_("p",[e._v("DOMContentLoaded 事件——当 DOMContentLoaded 事件触发时，仅当DOM加载完成，不包括样式表，图片，flash。")])])}),[],!1,null,null,null);t.default=a.exports}}]);